// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Server  Server[]
  Member  Member[]
  Channel Channel[]
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Member     Member[]
  Channel    Channel[]

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  sreverId String
  server   Server @relation(fields: [sreverId], references: [id], onDelete: Cascade)

  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt
  Message                Message[]
  ConversationsInitiated Conversation[]  @relation("MemberOne")
  ConversationsReceived  Conversation[]  @relation("MemberTwo")
  DirectMessage          DirectMessage[]

  @@index([profileId])
  @@index([sreverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Message    Message[]

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl  String? @db.Text
  member   Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation(name: "MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId   String
  memberTwo     Member          @relation(name: "MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  DirectMessage DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([memberId])
  @@index([conversationId])
}
